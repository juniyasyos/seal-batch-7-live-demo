#!/bin/bash

# Hentikan skrip jika ada kesalahan
set -e

# Periksa apakah dijalankan sebagai root
if [ "$(id -u)" -ne 0 ]; then
  echo "Error: Skrip ini harus dijalankan sebagai root." >&2
  exit 1
fi

# Fungsi bantuan
show_help() {
  cat <<EOF
Usage: $0 [options]

Options:
  --task-all              Jalankan semua task (default).
  --skip-terraform-apply  Lewati proses 'terraform apply'.
  --skip-ansible          Lewati semua task Ansible.
  --help                  Tampilkan bantuan ini.

EOF
}

# Fungsi log
log() {
  echo "[$(date +'%Y-%m-%d %H:%M:%S')] $@"
}

# Fungsi pengaturan perizinan
ensure_permissions() {
  [ -d "./playbooks" ] || return
  chmod -R 750 ./playbooks && chmod 640 ./playbooks/*.yaml && chown -R root:root ./playbooks
}

# Fungsi Terraform
run_terraform() {
  log "==> Inisialisasi Terraform"
  terraform init
  [ -f "terraform.tfstate" ] && [ "$SKIP_TERRAFORM_APPLY" == true ] && log "==> terraform.tfstate ditemukan, melewati terraform apply" || terraform apply -auto-approve
}

# Fungsi Ansible
run_ansible() {
  log "==> Menjalankan playbook Ansible"
  # for playbook in ./playbooks/*.yaml; do
  #   [ -f "$playbook" ] && ansible-playbook "$playbook" || log "Playbook $playbook tidak ditemukan."
  # done
  ansible-playbook ./playbooks/main.yaml
}

# Variabel default
TASK_ALL=true
SKIP_TERRAFORM_APPLY=false
SKIP_ANSIBLE=false

# Parsing argumen
while [[ "$#" -gt 0 ]]; do
  case $1 in
    --task-all) TASK_ALL=true ;;
    --skip-terraform-apply) SKIP_TERRAFORM_APPLY=true ;;
    --skip-ansible) SKIP_ANSIBLE=true ;;
    --help) show_help; exit 0 ;;
    *) echo "Unknown option: $1"; show_help; exit 1 ;;
  esac
  shift
done

# Eksekusi tugas
ensure_permissions
[ "$SKIP_TERRAFORM_APPLY" == false ] && run_terraform
[ "$SKIP_ANSIBLE" == false ] && run_ansible

log "==> Informasi IP Server"
ansible-inventory --graph || log "Gagal mendapatkan informasi inventory."

log "==> Deployment selesai."
