#version: "3.9"

services:

  redis:
    image: redis:alpine
    networks:
      - frontend
    deploy:
      update_config:
        parallelism: 2       # Number of tasks to update at once
        delay: 10s           # Delay between updates
        failure_action: rollback  # Roll back if an update fails
        order: start-first

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      update_config:
        parallelism: 2       # Number of tasks to update at once
        delay: 10s           # Delay between updates
        failure_action: rollback  # Roll back if an update fails
        order: start-first

  vote:
    image: dockersamples/examplevotingapp_vote
    ports:
      - 8080:80
    networks:
      - frontend
    deploy:
      replicas: 3
      update_config:
        parallelism: 2       # Number of tasks to update at once
        delay: 10s           # Delay between updates
        failure_action: rollback  # Roll back if an update fails
        order: start-first

  result:
    image: dockersamples/examplevotingapp_result
    ports:
      - 8081:80
    networks:
      - backend
    deploy:
      update_config:
        parallelism: 2       # Number of tasks to update at once
        delay: 10s           # Delay between updates
        failure_action: rollback  # Roll back if an update fails
        order: start-first

  worker:
    image: dockersamples/examplevotingapp_worker
    networks:
      - frontend
      - backend
    deploy:
      replicas: 2
      update_config:
        parallelism: 2       # Number of tasks to update at once
        delay: 10s           # Delay between updates
        failure_action: rollback  # Roll back if an update fails
        order: start-first

networks:
  frontend:
  backend:

volumes:
  db-data:
